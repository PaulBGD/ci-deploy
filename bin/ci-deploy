#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var glob = require('glob');
var dgram = require('dgram');
var yaml = require('js-yaml');
var crypto = require('crypto');
var archiver = require('archiver');

process.argv.splice(0, 2);

var configFile = path.join(process.env.HOME || process.env.USERPROFILE, 'config.json');

if (process.argv.length == 1 && process.argv[0].toLowerCase() === 'configure') {
    if (fs.existsSync(configFile)) {
        var data = fs.readFileSync(configFile, 'utf8').toString();
        var json = JSON.parse(data);
        if (json.key) {
            return console.log('Your key is ' + json.key + '. Configuration located at ' + configFile);
        }
    }
    var bytes = crypto.randomBytes(48);
    var string = bytes.toString('hex');
    fs.writeFileSync(configFile, JSON.stringify({key: string, ip: '127.0.0.1', port: 8084}, null, 3));
    console.log('Your key is ' + string + '. Configuration located at ' + configFile);
} else if (process.argv.length == 1 && process.argv[0].toLowerCase() == 'test') {
    var config = require(configFile);
    var client = new net.Socket();
    client.connect(config.port, config.ip, function () {
        console.log('Connected to server');
        client.end();
    });
} else if (process.argv.length == 1) {
    // deploy
    var split = process.argv[0].split('/');
    var id = split.slice(split.length - 2, split.length).join('/').replace('.git', '');
    console.log('Id: ' + id);
    var gitlabYML = path.join(process.cwd(), '.ci-deploy.yml');
    if (!fs.existsSync(gitlabYML)) {
        return console.error('.ci-deploy.yml does not exist!');
    }
    data = yaml.load(fs.readFileSync(gitlabYML));
    if (!data['ci-deploy']) {
        return console.error('ci-deploy not found');
    }
    var toGlob = data['ci-deploy'].files || [];
    var files = [];
    toGlob.forEach(function (toGlob) {
        files = files.concat(glob.sync(toGlob));
    });
    if (files.length == 1) {
        // upload a single file
        upload(fs.createReadStream(files[0]), path.extname(files[0]), id);
    } else if (files.length > 1) {
        // zip the files
        var zip = archiver('zip', {});
        files.forEach(function (file) {
            zip.file(file, {name: file});
        });
        zip.finalize();
        zip.on('finish', function () {
            upload(zip, '.zip', id);
        });
    } else {
        throw new Error('No files to upload!');
    }
} else {
    throw new Error('Invalid usage. Usage: ci-deploy [configure|$CI_PROJECT_ID]');
}

function upload(pipe, extension, projectId) {
    if (!fs.existsSync(configFile)) {
        throw new Error('Key does not exist! Have you ran ci-deploy configure? I\'m looking at ' + configFile);
    }
    var config = require(configFile);
    if (!config.key) {
        throw new Error('Key does not exist! Have you ran ci-deploy configure? I\'m looking at ' + configFile);
    }
    var buffers = [];
    pipe.on('data', function (buffer) {
        buffers.push(buffer);
    });
    pipe.on('end', function () {
        var buffer = Buffer.concat(buffers);
        var key = config.key;

        var chunkSize = 4096;
        var difference = buffer.length % chunkSize;
        var chunks = (buffer.length - difference) / chunkSize;
        if (difference > 0) {
            chunks++; // for the extra stuff
        }

        var client = dgram.createSocket('udp4');
        console.log('Sending messages to server ' + config.ip + ':' + config.port);

        function send(str, callback) {
            var buf = Buffer.isBuffer(str) ? str : new Buffer(str, 'utf8');
            client.send(buf, 0, buf.length, config.port, config.ip, function (err) {
                if (err) {
                    throw err;
                }
                callback();
            });
        }

        console.log('Sending unique id..');
        send(key, sendProjectId);

        function sendProjectId() {
            console.log('Sending project id..');
            send(projectId, sendExtension);
        }

        function sendExtension() {
            console.log('Sending extension..');
            send(extension, sendChunks);
        }

        function sendChunks() {
            console.log('Sending chunks amount..');
            send(String(chunks), sendFile);
        }

        function sendFile() {
            console.log('Sending file..');
            var i = 0;
            function sendNextChunk() {
                if (i >= buffer.length) {
                    console.log('Done.');
                    client.close();
                    return;
                }
                console.log('Sending chunk ' + (i / chunkSize) + '/' + chunks + '..');
                client.send(buffer, i, Math.min(chunkSize, buffer.length - i), config.port, config.ip, function (err) {
                    if (err) {
                        throw err;
                    }
                    i += chunkSize;
                    sendNextChunk();
                });
            }
            sendNextChunk();
        }

    });
}
